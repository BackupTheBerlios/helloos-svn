
 -= HelloOS Educational Project =-
 -===============================-

  $Id$



I decided to skip 'c' version because 90% of code is rewritten since 'b' version (lesser, of course, but i feel that!).


Main changes in 0.0d:

* Memory model is Completely Rewritten! Now it simular to windows'(r) and linux's model: lower 2Gb is mapped for every process personally and higher 2Gb is a system memory area.

* Protection: all processes runs with CPL=3 and they cannot touch to the system memory and memory of another process. General protection fault is handled by kernel and process which invokes it will be killed.

* Simple memory manager is implemented (pager.c). Physical memory is allocated page by page for new processes and freed when process terminates.

* HelloOS now supports binaries in a.out-format (aout.c)! Only *static* zmagic binaries are supported. All relocation info and symbol table will be ignored. Several console commands have been added to handle a.out-files. See README for details.

* System calls mechanism is implemented via 0x80 interrupt (like in linux). There are three simple demo syscalls and several demo binaries to use it.


Other minor changes:

scheduler:
   * Ugly TaskPool is removed. TSS' will be allocated in separate page when process starts.

hello_stdio:
   * Fixed bug with scrolling on boot-up
   * scroll() is rewritten in asm
   * puts() and other i/o functions now handles '\t' metasymbol
   * Fixed bug in printf
   * Couple of small changes

hello_string:
   * several functions are rewritten in asm
   * memmove added

fd:
   * comments fixed

panic:
   * added infinity loop for QEmu which ignores "hlt" instruction

Makefile:
   * Dependences are now handled via gcc -M, so you need to 'make depend' before 'make all'

fat:
   * New LoadParts() function to load chunk of the file into the buffer

New file head.h now contains system constants such as segment selectors, offsets of system structures, etc.
